{"data":{"markdownRemark":{"html":"<p><a name='install'></a></p>\n<h2>install</h2>\n<p><code class=\"language-text\">yarn add --dev counsel</code></p>\n<p>alternatively, <code class=\"language-text\">npm install --save-dev counsel</code></p>\n<p><a name='usage'></a></p>\n<h2>usage</h2>\n<p>conventional usage is to add a <code class=\"language-text\">.counsel.ts</code> file to your project root dirname.</p>\n<p>you can have counsel insert a generic <code class=\"language-text\">.counsel.ts</code> file for you using <code class=\"language-text\">--init</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ counsel --init\ninfo: ⚙️ config file .counsel.ts created successfully</code></pre></div>\n<p>alternatively, as shown next, we can bootstrap our own <code class=\"language-text\">counsel.ts</code> file.</p>\n<p>once a project has a counsel file, run various counsel commands:</p>\n<ul>\n<li><code class=\"language-text\">npx counsel apply</code></li>\n<li><code class=\"language-text\">npx counsel check</code></li>\n</ul>\n<p><code class=\"language-text\">npx counsel --help</code> is also there to help!</p>\n<p><a name='concepts'></a></p>\n<h2>concepts</h2>\n<p>counsel has only one major concept to understand--the <code class=\"language-text\">Rule</code>.  counsel can apply rules\nand check that rules are enforced as needed.</p>\n<p><a name='rule'></a></p>\n<h3>rule</h3>\n<p><code class=\"language-text\">Rule</code>s are basic interfaces with:</p>\n<ol>\n<li>a <a href=\"#rulename\"><code class=\"language-text\">name</code></a></li>\n<li>an optional <a href=\"#ruleplan\"><code class=\"language-text\">plan</code></a> function</li>\n<li>an optional <a href=\"#rulecheck\"><code class=\"language-text\">check</code></a> function</li>\n<li>an optional list of <a href=\"#ruledependencies\"><code class=\"language-text\">dependencies</code></a></li>\n<li>an optional list of <a href=\"#ruledevdependencies\"><code class=\"language-text\">devDependencies</code></a></li>\n</ol>\n<p>in a nut-shell, <em>that's it</em>.  counsel is a small set of functions that run these\n<code class=\"language-text\">Rule</code>s against your project.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> debug <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example-rule'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> exampleRule<span class=\"token punctuation\">:</span> Rule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'example-rule'</span><span class=\"token punctuation\">,</span>\n  plan<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> ctx <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`planning to add key word to package: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ctx<span class=\"token punctuation\">.</span>packageJson<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      ctx<span class=\"token punctuation\">.</span>packageJson<span class=\"token punctuation\">.</span>keywords <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>packageJson<span class=\"token punctuation\">.</span>keywords <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      ctx<span class=\"token punctuation\">.</span>packageJson<span class=\"token punctuation\">.</span>keywords<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  check<span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> ctx<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> packageJson <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> keywords <span class=\"token operator\">=</span> packageJson<span class=\"token punctuation\">.</span>keywords <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`existing keywords: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>keywords<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> keywordExists <span class=\"token operator\">=</span> keywords<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">=></span> val <span class=\"token operator\">===</span> <span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>keywordExists<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'example' keyword missing\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  devDependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'debug'</span><span class=\"token punctuation\">,</span> range<span class=\"token punctuation\">:</span> <span class=\"token string\">'*'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a name='rulename'></a></p>\n<h3>rule.name</h3>\n<p>every rule requires a <code class=\"language-text\">name</code>.  it must always be a <code class=\"language-text\">string</code>.</p>\n<p><a name='ruleplan'></a></p>\n<h3>rule.plan</h3>\n<p>a <code class=\"language-text\">plan</code> returns a function or <code class=\"language-text\">null</code>, which we call a <code class=\"language-text\">Migration</code>.  a <code class=\"language-text\">Migration</code> is responsible for changing the project in some way.  rather than mutating the project upfront, all changes to a project are encouraged to happen in the <code class=\"language-text\">Migration</code>.  this gives the user an opporitunity to <em>opt-out</em> of rules in counsel's interactive mode.</p>\n<p>for example, here's a simplified version of counsel's baked in <code class=\"language-text\">copy</code> rule:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CopyRule</span> <span class=\"token punctuation\">{</span>\n  src<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n  dest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">plan</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">:</span> TaskPayload<span class=\"token operator\">&lt;</span>CopyRule<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>rule<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">.</span>rule<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">)</span></code></pre></div>\n<p>the <code class=\"language-text\">() =&gt; fs.copy(...)</code> matches the <code class=\"language-text\">Migration</code> type, so it should be set!\nplan receives a <a href=\"#taskpayload\">TaskPayload</a> as input, covered later.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> Migration<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">=</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// return null when there is nothing to migrate</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">R</span> <span class=\"token operator\">|</span> Promise<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// otherwise, migrate in a returned function</span></code></pre></div>\n<p><a name='rulecheck'></a></p>\n<h3>rule.check</h3>\n<p>check recieves a <a href=\"#taskpayload\">TaskPayload</a> as is responsible for ensuring\nthat a rule is enforced.</p>\n<p><a name='ruledependencies'></a>\n<a name='ruledevdependencies'></a></p>\n<h3>rule.dependencies</h3>\n<p>rules can request dependencies &#x26; devDependencies to be installed.  dependencies\nare always requested in a range format:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> installRule<span class=\"token punctuation\">:</span> Rule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'install-koa'</span><span class=\"token punctuation\">,</span>\n  dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'koa'</span><span class=\"token punctuation\">,</span> range<span class=\"token punctuation\">:</span> <span class=\"token string\">'^2'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  devDependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'node-fetch'</span><span class=\"token punctuation\">:</span> range<span class=\"token punctuation\">:</span> <span class=\"token string\">'*'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>by using <a href=\"https://www.npmjs.com/package/semver\">semver</a> ranges, you can pin dependencies\nwith moderate precision or flexibility.</p>\n<p><a name='taskpayload'></a></p>\n<h3>TaskPayload</h3>\n<p><code class=\"language-text\">plan</code> and <code class=\"language-text\">check</code> received a task payload as input.  check out the</p>\n<p>what to read or try next is up to you!</p>\n<ul>\n<li><a href=\"./docs/examples.md\">try some examples</a></li>\n<li><a href=\"./docs/rules-batteries-included.md\">learn about the batteries-included rules that ship with counsel</a></li>\n</ul>","frontmatter":{"title":"getting started"}}},"pageContext":{"slug":"/jumpstart/"}}