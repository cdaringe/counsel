{"data":{"markdownRemark":{"html":"<h2>install</h2>\n<p><code class=\"language-text\">yarn add --dev counsel</code></p>\n<p>alternatively, <code class=\"language-text\">npm install --save-dev counsel</code></p>\n<h2>usage</h2>\n<p>conventional usage is to add a <code class=\"language-text\">.counsel.ts</code> file to your project root dirname.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">// .counsel.ts\n\n// create a rule!\n// basic rule that enforces that the project has a readme file\nexport const assertReadmeExists: Rule = {\n  name: &#39;assert-readme-exists&#39;,\n  check: async ({ fs, path, config: { projectDirname } }) =&gt; { // highlight-line\n    const readmeFilename = path.resolve(projectDirname, &#39;readme.md&#39;)\n    const isReadmeReadable = await fs.lstat(readmeFilename).catch(() =&gt; false)\n    if (!isReadmeReadable) throw new Error(&#39;readme.md file missing&#39;)\n  }\n}\n\n// export your rules via a `create` function\nexport function create (opts: ContextWithRules) =&gt;\n  ({ ...opts, rules: [assertReadmeExists] })</code></pre></div>\n<p>finally run <code class=\"language-text\">npx counsel apply</code>, or <code class=\"language-text\">npx counsel check</code>.</p>\n<p>run <code class=\"language-text\">npx counsel --help</code> for more!</p>\n<h3>concepts</h3>\n<p>counsel has only one major concept to understand--<code class=\"language-text\">Rule</code>s.  counsel can apply rules\nand check that rules are enforced as needed</p>\n<ol>\n<li>\n<p><code class=\"language-text\">Rule</code>s are basic interfaces with:</p>\n<ol>\n<li>a <code class=\"language-text\">name</code></li>\n<li>an optional <code class=\"language-text\">plan</code> function</li>\n<li>an optional <code class=\"language-text\">check</code> function</li>\n<li>an optional list of <code class=\"language-text\">dependencies</code></li>\n<li>an optional list of <code class=\"language-text\">devDependencies</code></li>\n</ol>\n</li>\n</ol>\n<p>in a nut-shell, <em>that's it</em>.  counsel is a small set of functions that run these\n<code class=\"language-text\">Rule</code>s against your project.</p>\n<p><code class=\"language-text\">plan</code> is pehaps the only abstract concept.  <code class=\"language-text\">plan</code> functions are thunks.  a <code class=\"language-text\">plan</code> returns a new function, which we call a <code class=\"language-text\">Migration</code>.  a <code class=\"language-text\">Migration</code> is responsible for creating changing the project in some way.  rather than mutating the project upfront, all changes to a project are encouraged to happen in the <code class=\"language-text\">Migration</code>.  this gives the user an opporitunity to <em>opt-out</em> of rules in counsel's interactive mode.</p>\n<p>what to read or try next is up to you!</p>\n<ul>\n<li><a href=\"./docs/examples.md\">try some examples</a></li>\n<li><a href=\"./docs/rules-batteries-included.md\">learn about the batteries-included rules that ship with counsel</a></li>\n</ul>","frontmatter":{"title":"Getting Started"}}},"pageContext":{"slug":"/jumpstart/"}}