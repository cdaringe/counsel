{"data":{"markdownRemark":{"html":"<h2>install</h2>\n<p><code class=\"language-text\">yarn add --dev counsel</code></p>\n<p>alternatively, <code class=\"language-text\">npm install --save-dev counsel</code></p>\n<h2>usage</h2>\n<p>conventional usage is to add a <code class=\"language-text\">.counsel.ts</code> file to your project root dirname.</p>\n<p>you can have counsel insert a generic <code class=\"language-text\">.counsel.ts</code> file for you using <code class=\"language-text\">--init</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ counsel --init\ninfo: ⚙️ config file .counsel.ts created successfully</code></pre></div>\n<p>or, we can bootstrap our own.  let's create a basic rule that enforces that\nthe project has a readme file:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// .counsel.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> assertReadmeExists<span class=\"token punctuation\">:</span> Rule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'assert-readme-exists'</span><span class=\"token punctuation\">,</span>\n  check<span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> fs<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> projectDirname <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>projectDirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'readme.md'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> isReadable <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">lstat</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isReadable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readme.md file missing'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// export your rules via a `create` function</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span> <span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">:</span> ContextWithRules<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>opts<span class=\"token punctuation\">,</span> rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>assertReadmeExists<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>finally run <code class=\"language-text\">npx counsel apply</code>, or <code class=\"language-text\">npx counsel check</code>.</p>\n<p>run <code class=\"language-text\">npx counsel --help</code> for more!</p>\n<h3>concepts</h3>\n<p>counsel has only one major concept to understand--the <code class=\"language-text\">Rule</code>.  counsel can apply rules\nand check that rules are enforced as needed.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">Rule</code>s are basic interfaces with:</p>\n<ol>\n<li>a <code class=\"language-text\">name</code></li>\n<li>an optional <code class=\"language-text\">plan</code> function</li>\n<li>an optional <code class=\"language-text\">check</code> function</li>\n<li>an optional list of <code class=\"language-text\">dependencies</code></li>\n<li>an optional list of <code class=\"language-text\">devDependencies</code></li>\n</ol>\n</li>\n</ol>\n<p>in a nut-shell, <em>that's it</em>.  counsel is a small set of functions that run these\n<code class=\"language-text\">Rule</code>s against your project.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> exampleRule<span class=\"token punctuation\">:</span> Rule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'example-rule'</span><span class=\"token punctuation\">,</span>\n  plan<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> config <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`planning to add key word to package: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>config<span class=\"token punctuation\">.</span>packageJson<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> config<span class=\"token punctuation\">.</span>packageJson<span class=\"token punctuation\">.</span>keywords<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  check<span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> fs<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> projectDirname <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>projectDirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'readme.md'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> isReadable <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">lstat</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isReadable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readme.md file missing'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>plan</h4>\n<p><code class=\"language-text\">plan</code> is pehaps the only abstract concept.  <code class=\"language-text\">plan</code> functions are thunks.  a <code class=\"language-text\">plan</code> returns a new function, which we call a <code class=\"language-text\">Migration</code>.  a <code class=\"language-text\">Migration</code> is responsible for creating changing the project in some way.  rather than mutating the project upfront, all changes to a project are encouraged to happen in the <code class=\"language-text\">Migration</code>.  this gives the user an opporitunity to <em>opt-out</em> of rules in counsel's interactive mode.</p>\n<p>what to read or try next is up to you!</p>\n<ul>\n<li><a href=\"./docs/examples.md\">try some examples</a></li>\n<li><a href=\"./docs/rules-batteries-included.md\">learn about the batteries-included rules that ship with counsel</a></li>\n</ul>","frontmatter":{"title":"getting started"}}},"pageContext":{"slug":"/jumpstart/"}}